<?php $__env->startSection('title', '数据库文档: 一主库多从库'); ?>

<?php $__env->startSection('content'); ?>
<pre class="brush:php;toolbar:false">
数据库配置文件放置在 config/database.php. 在这个配置文件内你可以定义所有的数据库

连接，以及指定默认使用哪个连接. 


"一主多备结构" 将 "所有" 数据分发到多个服务器上, 然后在备库进行读查询. 因为只有单台

主库, 那么不管有多少备库, 写容量都是无法扩展的. 如果想扩展写容量, 就必须切分数据.


"数据分片" 简单来说, 就是指通过某种特定的条件, 将存放在同一个数据库中的数据分散存放到

多个数据库(主机)上面以达到分散单台设备负载的效果. 切分模式: 垂直拆分、水平拆分.


"垂直切分": 按照业务来拆分数据库, 同一类业务的数据表拆分到一个独立的数据库(主机). 每个

数据库(主机)只包含特点业务所需要的数据, 以降低单库大小, 达到提升性能的目的的方法.


例如: 门户网站包含不同的栏目: 娱乐、体育、财经、科技、房产等, 这些不同功能区域的数据可以

放到专用的数据库中, 如图所示:


                                       _______
                                      |       |
                                      |       |
                                       门户网站 
                                      |       |
                                      |_______|

                                          | 
               ___________________________|_____________________________
              |                           |                             |
              |                           |                             |
              
        娱乐板块 主库                  财经板块 主库                 科技板块 主库  ....      
           _______                      _______                       _______
          |       |                    |       |                     |       |
          |       |                    |       |                     |       |
          |1.1.1.0|                    |1.1.2.0|                     |1.1.3.0|
          |       |                    |       |                     |       |
          |_______|                    |_______|                     |_______|

     _________|_________          _________|_________           _________|_________  
    |         |         |        |         |         |         |         |         | 
    |         |         |        |         |         |         |         |         |               
 _______   _______   _______   _______   _______   _______   _______   _______   _______   
|       | |       | |       | |       | |       | |       | |       | |       | |       |
|       | |       | |       | |       | |       | |       | |       | |       | |       |
|1.1.1.1| |1.1.1.2| |1.1.1.3| |1.1.2.1| |1.1.2.2| |1.1.2.3| |1.1.3.1| |1.1.3.2| |1.1.3.3| 
|       | |       | |       | |       | |       | |       | |       | |       | |       |
|_______| |_______| |_______| |_______| |_______| |_______| |_______| |_______| |_______|

     娱乐板块 备库 (可选)             财经板块 备库 (可选)            科技板块 备库 (可选)  




配置和 "一主库多备库" 结构类似, 只需在 connections 数组中增加不同的数据库连接信息. 


return [
    //默认数据连接标识
    'default'     => 'finance',

    //数据库连接信息
    'connections' => [

        //娱乐板块数据库配置信息
        'entertainment' => [
            //驱动类型 (目前只支持mysql)
            'driver'     => 'mysql',
            
            //表前缀
            'prefix'    =>  'onion_',

            //服务器连接参数, 各台服务器的连接参数 (hosts除外) 相同时, 只需填写一个
            'servers'   => [
                //服务器地址 
                'host'       => ['1.1.1.0', '1.1.1.1', '1.1.1.2', '1.1.1.3'],
                //服务器端口
                'port'       => [3306],
                //数据库名 
                'database'   => ['entertainment'],
                //用户名
                'username'   => ['your_username'],
                //密码
                'password'   => ['your_password'],
                //数据库编码
                'charset'    => ['utf8']
            ]
        ],


        //财经板块数据库配置信息
        'finance' => [
            //驱动类型 (目前只支持mysql)
            'driver'     => 'mysql',
            
            //表前缀
            'prefix'    =>  'onion_',

            //服务器连接参数 (各台服务器的参数相同时, 只需填写一个)
            'servers'   => [
                //服务器地址 
                'host'       => ['1.1.2.0', '1.1.2.1', '1.1.2.2', '1.1.2.3'],
                //服务器端口
                'port'       => [3306],
                //数据库名 
                'database'   => ['finance'],
                //用户名
                'username'   => ['your_username'],
                //密码
                'password'   => ['your_password'],
                //数据库编码
                'charset'    => ['utf8']
            ]
        ],    


        //科技板块数据库配置信息
        'technology' => [
            //驱动类型 (目前只支持mysql)
            'driver'     => 'mysql',
            
            //表前缀
            'prefix'    =>  'onion_',

            //服务器连接参数 (各台服务器的参数相同时, 只需填写一个)
            'servers'   => [
                //服务器地址 
                'host'       => ['1.1.3.0', '1.1.3.1', '1.1.3.2', '1.1.3.3'],
                //服务器端口
                'port'       => [3306],
                //数据库名 
                'database'   => ['technology'],
                //用户名
                'username'   => ['your_username'],
                //密码
                'password'   => ['your_password'],
                //数据库编码
                'charset'    => ['utf8']
            ]
        ]    
    ]
];




使用方法和单服务器一样, 你可以在 Model 类里指明使用的连接名称, 例如下面的 News 模型将会

使用 entertainment 数据库连接. 默认连接名称为 配置数组里 default 键的值.


class News extends \Onion\Database\Model {
    
    /**
     * 方式一: 通过属性设置连接名称 (配置文件 config/databasa.php 里connections数组的键名)
     */    
    protected $connection = 'entertainment';

    /**
     * 方式二: 通过方法设置连接名称, 可用于分库
     */
    public function setConnection(...$args) {
        $this->connection = $args[0];
        return $this;
    } 
}

//使用News类定义的连接名称
(new News)->select();

//动态切换连接
(new News)->setConnection('entertainment')->select();
</pre>
<?php $__env->stopSection(); ?>
<?php echo $__env->make('home.public', array_except(get_defined_vars(), array('__data', '__path')))->render(); ?>